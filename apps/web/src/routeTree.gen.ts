/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WebRouteImport } from './routes/web'
import { Route as IndexcopyRouteImport } from './routes/index copy'
import { Route as DesktopRouteImport } from './routes/desktop'
import { Route as HomeRouteRouteImport } from './routes/home/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ShareIndexRouteImport } from './routes/share/$index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as HomeTrashRouteImport } from './routes/home/trash'
import { Route as HomeItemsRouteImport } from './routes/home/items'
import { Route as HomeHistoryRouteImport } from './routes/home/history'
import { Route as HomeDevicesRouteImport } from './routes/home/devices'
import { Route as HomeContentRouteImport } from './routes/home/content'
import { Route as HomeBuddyShareRouteImport } from './routes/home/buddy-share'
import { Route as AuthVerifyRouteImport } from './routes/auth/verify'
import { Route as AuthVerifiedRouteImport } from './routes/auth/verified'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthResetPwdRouteImport } from './routes/auth/reset-pwd'
import { Route as AuthPasswordChangedRouteImport } from './routes/auth/password-changed'
import { Route as AuthNewPasswordRouteImport } from './routes/auth/new-password'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthCheckEmailRouteImport } from './routes/auth/check-email'
import { Route as AdminHomeRouteRouteImport } from './routes/admin/home/route'
import { Route as AdminAuthRouteRouteImport } from './routes/admin/auth/route'
import { Route as AdminHomeIndexRouteImport } from './routes/admin/home/index'
import { Route as HomeMIdRouteImport } from './routes/home/m/$id'
import { Route as HomeFIdRouteImport } from './routes/home/f/$id'
import { Route as AdminAuthResetPwdRouteImport } from './routes/admin/auth/reset-pwd'
import { Route as AdminAuthNewPwdRouteImport } from './routes/admin/auth/new-pwd'
import { Route as AdminAuthLoginRouteImport } from './routes/admin/auth/login'
import { Route as AdminHomeMembersRouteRouteImport } from './routes/admin/home/members/route'
import { Route as AdminHomeMembersIndexRouteImport } from './routes/admin/home/members/index'
import { Route as AdminHomeMembersMemberIdRouteImport } from './routes/admin/home/members/$memberId'

const WebRoute = WebRouteImport.update({
  id: '/web',
  path: '/web',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexcopyRoute = IndexcopyRouteImport.update({
  id: '/index copy',
  path: '/index copy',
  getParentRoute: () => rootRouteImport,
} as any)
const DesktopRoute = DesktopRouteImport.update({
  id: '/desktop',
  path: '/desktop',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRouteRoute = HomeRouteRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ShareIndexRoute = ShareIndexRouteImport.update({
  id: '/share/$index',
  path: '/share/$index',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeTrashRoute = HomeTrashRouteImport.update({
  id: '/trash',
  path: '/trash',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeItemsRoute = HomeItemsRouteImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeHistoryRoute = HomeHistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeDevicesRoute = HomeDevicesRouteImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeContentRoute = HomeContentRouteImport.update({
  id: '/content',
  path: '/content',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeBuddyShareRoute = HomeBuddyShareRouteImport.update({
  id: '/buddy-share',
  path: '/buddy-share',
  getParentRoute: () => HomeRouteRoute,
} as any)
const AuthVerifyRoute = AuthVerifyRouteImport.update({
  id: '/verify',
  path: '/verify',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthVerifiedRoute = AuthVerifiedRouteImport.update({
  id: '/verified',
  path: '/verified',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthResetPwdRoute = AuthResetPwdRouteImport.update({
  id: '/reset-pwd',
  path: '/reset-pwd',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthPasswordChangedRoute = AuthPasswordChangedRouteImport.update({
  id: '/password-changed',
  path: '/password-changed',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthNewPasswordRoute = AuthNewPasswordRouteImport.update({
  id: '/new-password',
  path: '/new-password',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthCheckEmailRoute = AuthCheckEmailRouteImport.update({
  id: '/check-email',
  path: '/check-email',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AdminHomeRouteRoute = AdminHomeRouteRouteImport.update({
  id: '/admin/home',
  path: '/admin/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAuthRouteRoute = AdminAuthRouteRouteImport.update({
  id: '/admin/auth',
  path: '/admin/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminHomeIndexRoute = AdminHomeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminHomeRouteRoute,
} as any)
const HomeMIdRoute = HomeMIdRouteImport.update({
  id: '/m/$id',
  path: '/m/$id',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeFIdRoute = HomeFIdRouteImport.update({
  id: '/f/$id',
  path: '/f/$id',
  getParentRoute: () => HomeRouteRoute,
} as any)
const AdminAuthResetPwdRoute = AdminAuthResetPwdRouteImport.update({
  id: '/reset-pwd',
  path: '/reset-pwd',
  getParentRoute: () => AdminAuthRouteRoute,
} as any)
const AdminAuthNewPwdRoute = AdminAuthNewPwdRouteImport.update({
  id: '/new-pwd',
  path: '/new-pwd',
  getParentRoute: () => AdminAuthRouteRoute,
} as any)
const AdminAuthLoginRoute = AdminAuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AdminAuthRouteRoute,
} as any)
const AdminHomeMembersRouteRoute = AdminHomeMembersRouteRouteImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => AdminHomeRouteRoute,
} as any)
const AdminHomeMembersIndexRoute = AdminHomeMembersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminHomeMembersRouteRoute,
} as any)
const AdminHomeMembersMemberIdRoute =
  AdminHomeMembersMemberIdRouteImport.update({
    id: '/$memberId',
    path: '/$memberId',
    getParentRoute: () => AdminHomeMembersRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/home': typeof HomeRouteRouteWithChildren
  '/desktop': typeof DesktopRoute
  '/index copy': typeof IndexcopyRoute
  '/web': typeof WebRoute
  '/admin/auth': typeof AdminAuthRouteRouteWithChildren
  '/admin/home': typeof AdminHomeRouteRouteWithChildren
  '/auth/check-email': typeof AuthCheckEmailRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/new-password': typeof AuthNewPasswordRoute
  '/auth/password-changed': typeof AuthPasswordChangedRoute
  '/auth/reset-pwd': typeof AuthResetPwdRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/verified': typeof AuthVerifiedRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/home/buddy-share': typeof HomeBuddyShareRoute
  '/home/content': typeof HomeContentRoute
  '/home/devices': typeof HomeDevicesRoute
  '/home/history': typeof HomeHistoryRoute
  '/home/items': typeof HomeItemsRoute
  '/home/trash': typeof HomeTrashRoute
  '/share/$index': typeof ShareIndexRoute
  '/home/': typeof HomeIndexRoute
  '/admin/home/members': typeof AdminHomeMembersRouteRouteWithChildren
  '/admin/auth/login': typeof AdminAuthLoginRoute
  '/admin/auth/new-pwd': typeof AdminAuthNewPwdRoute
  '/admin/auth/reset-pwd': typeof AdminAuthResetPwdRoute
  '/home/f/$id': typeof HomeFIdRoute
  '/home/m/$id': typeof HomeMIdRoute
  '/admin/home/': typeof AdminHomeIndexRoute
  '/admin/home/members/$memberId': typeof AdminHomeMembersMemberIdRoute
  '/admin/home/members/': typeof AdminHomeMembersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/desktop': typeof DesktopRoute
  '/index copy': typeof IndexcopyRoute
  '/web': typeof WebRoute
  '/admin/auth': typeof AdminAuthRouteRouteWithChildren
  '/auth/check-email': typeof AuthCheckEmailRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/new-password': typeof AuthNewPasswordRoute
  '/auth/password-changed': typeof AuthPasswordChangedRoute
  '/auth/reset-pwd': typeof AuthResetPwdRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/verified': typeof AuthVerifiedRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/home/buddy-share': typeof HomeBuddyShareRoute
  '/home/content': typeof HomeContentRoute
  '/home/devices': typeof HomeDevicesRoute
  '/home/history': typeof HomeHistoryRoute
  '/home/items': typeof HomeItemsRoute
  '/home/trash': typeof HomeTrashRoute
  '/share/$index': typeof ShareIndexRoute
  '/home': typeof HomeIndexRoute
  '/admin/auth/login': typeof AdminAuthLoginRoute
  '/admin/auth/new-pwd': typeof AdminAuthNewPwdRoute
  '/admin/auth/reset-pwd': typeof AdminAuthResetPwdRoute
  '/home/f/$id': typeof HomeFIdRoute
  '/home/m/$id': typeof HomeMIdRoute
  '/admin/home': typeof AdminHomeIndexRoute
  '/admin/home/members/$memberId': typeof AdminHomeMembersMemberIdRoute
  '/admin/home/members': typeof AdminHomeMembersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/home': typeof HomeRouteRouteWithChildren
  '/desktop': typeof DesktopRoute
  '/index copy': typeof IndexcopyRoute
  '/web': typeof WebRoute
  '/admin/auth': typeof AdminAuthRouteRouteWithChildren
  '/admin/home': typeof AdminHomeRouteRouteWithChildren
  '/auth/check-email': typeof AuthCheckEmailRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/new-password': typeof AuthNewPasswordRoute
  '/auth/password-changed': typeof AuthPasswordChangedRoute
  '/auth/reset-pwd': typeof AuthResetPwdRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/verified': typeof AuthVerifiedRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/home/buddy-share': typeof HomeBuddyShareRoute
  '/home/content': typeof HomeContentRoute
  '/home/devices': typeof HomeDevicesRoute
  '/home/history': typeof HomeHistoryRoute
  '/home/items': typeof HomeItemsRoute
  '/home/trash': typeof HomeTrashRoute
  '/share/$index': typeof ShareIndexRoute
  '/home/': typeof HomeIndexRoute
  '/admin/home/members': typeof AdminHomeMembersRouteRouteWithChildren
  '/admin/auth/login': typeof AdminAuthLoginRoute
  '/admin/auth/new-pwd': typeof AdminAuthNewPwdRoute
  '/admin/auth/reset-pwd': typeof AdminAuthResetPwdRoute
  '/home/f/$id': typeof HomeFIdRoute
  '/home/m/$id': typeof HomeMIdRoute
  '/admin/home/': typeof AdminHomeIndexRoute
  '/admin/home/members/$memberId': typeof AdminHomeMembersMemberIdRoute
  '/admin/home/members/': typeof AdminHomeMembersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/home'
    | '/desktop'
    | '/index copy'
    | '/web'
    | '/admin/auth'
    | '/admin/home'
    | '/auth/check-email'
    | '/auth/login'
    | '/auth/new-password'
    | '/auth/password-changed'
    | '/auth/reset-pwd'
    | '/auth/signup'
    | '/auth/verified'
    | '/auth/verify'
    | '/home/buddy-share'
    | '/home/content'
    | '/home/devices'
    | '/home/history'
    | '/home/items'
    | '/home/trash'
    | '/share/$index'
    | '/home/'
    | '/admin/home/members'
    | '/admin/auth/login'
    | '/admin/auth/new-pwd'
    | '/admin/auth/reset-pwd'
    | '/home/f/$id'
    | '/home/m/$id'
    | '/admin/home/'
    | '/admin/home/members/$memberId'
    | '/admin/home/members/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/desktop'
    | '/index copy'
    | '/web'
    | '/admin/auth'
    | '/auth/check-email'
    | '/auth/login'
    | '/auth/new-password'
    | '/auth/password-changed'
    | '/auth/reset-pwd'
    | '/auth/signup'
    | '/auth/verified'
    | '/auth/verify'
    | '/home/buddy-share'
    | '/home/content'
    | '/home/devices'
    | '/home/history'
    | '/home/items'
    | '/home/trash'
    | '/share/$index'
    | '/home'
    | '/admin/auth/login'
    | '/admin/auth/new-pwd'
    | '/admin/auth/reset-pwd'
    | '/home/f/$id'
    | '/home/m/$id'
    | '/admin/home'
    | '/admin/home/members/$memberId'
    | '/admin/home/members'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/home'
    | '/desktop'
    | '/index copy'
    | '/web'
    | '/admin/auth'
    | '/admin/home'
    | '/auth/check-email'
    | '/auth/login'
    | '/auth/new-password'
    | '/auth/password-changed'
    | '/auth/reset-pwd'
    | '/auth/signup'
    | '/auth/verified'
    | '/auth/verify'
    | '/home/buddy-share'
    | '/home/content'
    | '/home/devices'
    | '/home/history'
    | '/home/items'
    | '/home/trash'
    | '/share/$index'
    | '/home/'
    | '/admin/home/members'
    | '/admin/auth/login'
    | '/admin/auth/new-pwd'
    | '/admin/auth/reset-pwd'
    | '/home/f/$id'
    | '/home/m/$id'
    | '/admin/home/'
    | '/admin/home/members/$memberId'
    | '/admin/home/members/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  HomeRouteRoute: typeof HomeRouteRouteWithChildren
  DesktopRoute: typeof DesktopRoute
  IndexcopyRoute: typeof IndexcopyRoute
  WebRoute: typeof WebRoute
  AdminAuthRouteRoute: typeof AdminAuthRouteRouteWithChildren
  AdminHomeRouteRoute: typeof AdminHomeRouteRouteWithChildren
  ShareIndexRoute: typeof ShareIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/web': {
      id: '/web'
      path: '/web'
      fullPath: '/web'
      preLoaderRoute: typeof WebRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/index copy': {
      id: '/index copy'
      path: '/index copy'
      fullPath: '/index copy'
      preLoaderRoute: typeof IndexcopyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/desktop': {
      id: '/desktop'
      path: '/desktop'
      fullPath: '/desktop'
      preLoaderRoute: typeof DesktopRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/share/$index': {
      id: '/share/$index'
      path: '/share/$index'
      fullPath: '/share/$index'
      preLoaderRoute: typeof ShareIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/'
      fullPath: '/home/'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/trash': {
      id: '/home/trash'
      path: '/trash'
      fullPath: '/home/trash'
      preLoaderRoute: typeof HomeTrashRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/items': {
      id: '/home/items'
      path: '/items'
      fullPath: '/home/items'
      preLoaderRoute: typeof HomeItemsRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/history': {
      id: '/home/history'
      path: '/history'
      fullPath: '/home/history'
      preLoaderRoute: typeof HomeHistoryRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/devices': {
      id: '/home/devices'
      path: '/devices'
      fullPath: '/home/devices'
      preLoaderRoute: typeof HomeDevicesRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/content': {
      id: '/home/content'
      path: '/content'
      fullPath: '/home/content'
      preLoaderRoute: typeof HomeContentRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/buddy-share': {
      id: '/home/buddy-share'
      path: '/buddy-share'
      fullPath: '/home/buddy-share'
      preLoaderRoute: typeof HomeBuddyShareRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/auth/verify': {
      id: '/auth/verify'
      path: '/verify'
      fullPath: '/auth/verify'
      preLoaderRoute: typeof AuthVerifyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/verified': {
      id: '/auth/verified'
      path: '/verified'
      fullPath: '/auth/verified'
      preLoaderRoute: typeof AuthVerifiedRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/reset-pwd': {
      id: '/auth/reset-pwd'
      path: '/reset-pwd'
      fullPath: '/auth/reset-pwd'
      preLoaderRoute: typeof AuthResetPwdRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/password-changed': {
      id: '/auth/password-changed'
      path: '/password-changed'
      fullPath: '/auth/password-changed'
      preLoaderRoute: typeof AuthPasswordChangedRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/new-password': {
      id: '/auth/new-password'
      path: '/new-password'
      fullPath: '/auth/new-password'
      preLoaderRoute: typeof AuthNewPasswordRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/check-email': {
      id: '/auth/check-email'
      path: '/check-email'
      fullPath: '/auth/check-email'
      preLoaderRoute: typeof AuthCheckEmailRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/admin/home': {
      id: '/admin/home'
      path: '/admin/home'
      fullPath: '/admin/home'
      preLoaderRoute: typeof AdminHomeRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/auth': {
      id: '/admin/auth'
      path: '/admin/auth'
      fullPath: '/admin/auth'
      preLoaderRoute: typeof AdminAuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/home/': {
      id: '/admin/home/'
      path: '/'
      fullPath: '/admin/home/'
      preLoaderRoute: typeof AdminHomeIndexRouteImport
      parentRoute: typeof AdminHomeRouteRoute
    }
    '/home/m/$id': {
      id: '/home/m/$id'
      path: '/m/$id'
      fullPath: '/home/m/$id'
      preLoaderRoute: typeof HomeMIdRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/f/$id': {
      id: '/home/f/$id'
      path: '/f/$id'
      fullPath: '/home/f/$id'
      preLoaderRoute: typeof HomeFIdRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/admin/auth/reset-pwd': {
      id: '/admin/auth/reset-pwd'
      path: '/reset-pwd'
      fullPath: '/admin/auth/reset-pwd'
      preLoaderRoute: typeof AdminAuthResetPwdRouteImport
      parentRoute: typeof AdminAuthRouteRoute
    }
    '/admin/auth/new-pwd': {
      id: '/admin/auth/new-pwd'
      path: '/new-pwd'
      fullPath: '/admin/auth/new-pwd'
      preLoaderRoute: typeof AdminAuthNewPwdRouteImport
      parentRoute: typeof AdminAuthRouteRoute
    }
    '/admin/auth/login': {
      id: '/admin/auth/login'
      path: '/login'
      fullPath: '/admin/auth/login'
      preLoaderRoute: typeof AdminAuthLoginRouteImport
      parentRoute: typeof AdminAuthRouteRoute
    }
    '/admin/home/members': {
      id: '/admin/home/members'
      path: '/members'
      fullPath: '/admin/home/members'
      preLoaderRoute: typeof AdminHomeMembersRouteRouteImport
      parentRoute: typeof AdminHomeRouteRoute
    }
    '/admin/home/members/': {
      id: '/admin/home/members/'
      path: '/'
      fullPath: '/admin/home/members/'
      preLoaderRoute: typeof AdminHomeMembersIndexRouteImport
      parentRoute: typeof AdminHomeMembersRouteRoute
    }
    '/admin/home/members/$memberId': {
      id: '/admin/home/members/$memberId'
      path: '/$memberId'
      fullPath: '/admin/home/members/$memberId'
      preLoaderRoute: typeof AdminHomeMembersMemberIdRouteImport
      parentRoute: typeof AdminHomeMembersRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthCheckEmailRoute: typeof AuthCheckEmailRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthNewPasswordRoute: typeof AuthNewPasswordRoute
  AuthPasswordChangedRoute: typeof AuthPasswordChangedRoute
  AuthResetPwdRoute: typeof AuthResetPwdRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthVerifiedRoute: typeof AuthVerifiedRoute
  AuthVerifyRoute: typeof AuthVerifyRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthCheckEmailRoute: AuthCheckEmailRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthNewPasswordRoute: AuthNewPasswordRoute,
  AuthPasswordChangedRoute: AuthPasswordChangedRoute,
  AuthResetPwdRoute: AuthResetPwdRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthVerifiedRoute: AuthVerifiedRoute,
  AuthVerifyRoute: AuthVerifyRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface HomeRouteRouteChildren {
  HomeBuddyShareRoute: typeof HomeBuddyShareRoute
  HomeContentRoute: typeof HomeContentRoute
  HomeDevicesRoute: typeof HomeDevicesRoute
  HomeHistoryRoute: typeof HomeHistoryRoute
  HomeItemsRoute: typeof HomeItemsRoute
  HomeTrashRoute: typeof HomeTrashRoute
  HomeIndexRoute: typeof HomeIndexRoute
  HomeFIdRoute: typeof HomeFIdRoute
  HomeMIdRoute: typeof HomeMIdRoute
}

const HomeRouteRouteChildren: HomeRouteRouteChildren = {
  HomeBuddyShareRoute: HomeBuddyShareRoute,
  HomeContentRoute: HomeContentRoute,
  HomeDevicesRoute: HomeDevicesRoute,
  HomeHistoryRoute: HomeHistoryRoute,
  HomeItemsRoute: HomeItemsRoute,
  HomeTrashRoute: HomeTrashRoute,
  HomeIndexRoute: HomeIndexRoute,
  HomeFIdRoute: HomeFIdRoute,
  HomeMIdRoute: HomeMIdRoute,
}

const HomeRouteRouteWithChildren = HomeRouteRoute._addFileChildren(
  HomeRouteRouteChildren,
)

interface AdminAuthRouteRouteChildren {
  AdminAuthLoginRoute: typeof AdminAuthLoginRoute
  AdminAuthNewPwdRoute: typeof AdminAuthNewPwdRoute
  AdminAuthResetPwdRoute: typeof AdminAuthResetPwdRoute
}

const AdminAuthRouteRouteChildren: AdminAuthRouteRouteChildren = {
  AdminAuthLoginRoute: AdminAuthLoginRoute,
  AdminAuthNewPwdRoute: AdminAuthNewPwdRoute,
  AdminAuthResetPwdRoute: AdminAuthResetPwdRoute,
}

const AdminAuthRouteRouteWithChildren = AdminAuthRouteRoute._addFileChildren(
  AdminAuthRouteRouteChildren,
)

interface AdminHomeMembersRouteRouteChildren {
  AdminHomeMembersMemberIdRoute: typeof AdminHomeMembersMemberIdRoute
  AdminHomeMembersIndexRoute: typeof AdminHomeMembersIndexRoute
}

const AdminHomeMembersRouteRouteChildren: AdminHomeMembersRouteRouteChildren = {
  AdminHomeMembersMemberIdRoute: AdminHomeMembersMemberIdRoute,
  AdminHomeMembersIndexRoute: AdminHomeMembersIndexRoute,
}

const AdminHomeMembersRouteRouteWithChildren =
  AdminHomeMembersRouteRoute._addFileChildren(
    AdminHomeMembersRouteRouteChildren,
  )

interface AdminHomeRouteRouteChildren {
  AdminHomeMembersRouteRoute: typeof AdminHomeMembersRouteRouteWithChildren
  AdminHomeIndexRoute: typeof AdminHomeIndexRoute
}

const AdminHomeRouteRouteChildren: AdminHomeRouteRouteChildren = {
  AdminHomeMembersRouteRoute: AdminHomeMembersRouteRouteWithChildren,
  AdminHomeIndexRoute: AdminHomeIndexRoute,
}

const AdminHomeRouteRouteWithChildren = AdminHomeRouteRoute._addFileChildren(
  AdminHomeRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  HomeRouteRoute: HomeRouteRouteWithChildren,
  DesktopRoute: DesktopRoute,
  IndexcopyRoute: IndexcopyRoute,
  WebRoute: WebRoute,
  AdminAuthRouteRoute: AdminAuthRouteRouteWithChildren,
  AdminHomeRouteRoute: AdminHomeRouteRouteWithChildren,
  ShareIndexRoute: ShareIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
